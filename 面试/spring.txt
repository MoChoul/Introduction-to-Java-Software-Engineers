AOP：面向切面编程	
	#说明：AOP基于IoC基础，是对OOP的有益补充，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。
	##简单说就是那些与业务无关，却为多个业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性
	#原理：基于代理模式的方式实现，在调用目标方法之前会先调用代理类的目标方法，然后由代理类返回调用结果。spring aop使用了动态代理的代理方式。
	#核心概念：
		#切面：散落在系统各处的通用的业务逻辑代码，如上图中的日志模块，权限模块，事务模块等，切面用来装载pointcut和advice
		#通知：所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类
		#连接点：被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器
		#切入点：拦截的方法，连接点拦截后变成切入点
		#目标对象：代理的目标对象，指要织入的对象模块，如上图的模块一、二、三
		#织入：通过切入点切入，将切面应用到目标对象并导致代理对象创建的过程
		#AOP代理：AOP框架创建的对象，包含通知。在Spring中，AOP代理可以是JDK动态代理或CGLIB代理
	#例子：假如业务模块一、二、三都需要日志记录，那么如果都在三个模块内写日志逻辑，那么会有两个问题：
		#1，打破模块的封装性 
		#2，有很多重复代码 
		#解决重复代码问题，可以通过封装日志逻辑为一个类，然后在各个模块需要的地方通过该类来试下日志功能，但是还是不能解决影响模块封装性的问题。 
		#那么AOP就可以解决，它使用切面，动态地织入到各模块中（实际就是使用代理来管理模块对象），这样既解决了重复代码问题又不会影响模块的封装性
